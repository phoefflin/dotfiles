
let g:statusline_used = "lightline"	" 'lightline', 'airline', dor flagship (default)


if !exists('g:vscode')

" *** vim Plugins {{{

" *** vim-plug config / initialization {{{
let g:plug_installed = 0
if filereadable( $X_VIM_BASE . "/vimrc" )
  let g:plug_basedir = $X_VIM_BASE . "/plugged"
  if !filereadable( $X_VIM_BASE . "/autoload/plug.vim")
    echo "Installing vim-plug and pulling plugins..."
    echo ""
    silent !mkdir -p $X_VIM_BASE . "/autoload"
    silent !curl -fLo $X_VIM_BASE . /autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    echo "Installed vim-plug, plugins will be pulled..."
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    let g:plug_installed = 1
  endif
  source $X_VIM_BASE/autoload/plug.vim
else
  let g:plug_basedir = "~/.vim/plugged"
  if !filereadable( $HOME . "/.vim/autoload/plug.vim")
    echo "Installing vim-plug and pulling plugins..."
    echo ""
    silent !mkdir -p ~/.vim/autoload
    silent !curl -fLo ~/.vim/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    echo "Installed vim-plug, plugins will be pulled..."
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    let g:plug_installed = 1
  endif
endif
" *** vim-plug config / initialisation }}}

" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin(g:plug_basedir)

Plug 'tpope/vim-sensible'

" disabled, too opinionated
" Plug 'liuchengxu/vim-better-default'

" sane settings for netrw file commander
Plug 'tpope/vim-vinegar'
let g:netrw_liststyle = 3		" tree view by default, toggle with 'i'

" commenting
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'

Plug 'godlygeek/tabular'
" needed for vimdeck
Plug 'tpope/vim-markdown'
Plug 'vim-scripts/SyntaxRange'
" Plug 'sheerun/vim-polyglot'

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

" " Mail:
" Plug 'adborden/vim-notmuch-address'

" taskwarrior
" Plug 'farseer90718/vim-taskwarrior'
Plug 'jamessan/vim-gnupg'

Plug 'ctrlpvim/ctrlp.vim'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_max_files = 0		" Set no max file limit
let g:ctrlp_path_sort = 1


" if executable('ag')
"   " Use Ag over Grep
"   set grepprg=ag\ --nogroup\ --nocolor

"   " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
"   let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
" endif

" Plug 'altercation/vim-colors-solarized'
Plug 'iCyMind/NeoSolarized'

Plug 'editorconfig/editorconfig-vim'

" GIT
Plug 'tpope/vim-fugitive'

" Unicode/utf8 aware 'ga'
Plug 'tpope/vim-characterize'

" " fzf fuzzy find
" Plug '/usr/bin/fzf'
" Plug 'junegunn/fzf.vim'

" Javascript/Typescript
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'styled-components/vim-styled-components', { 'branch': 'main'}
" completion
Plug 'neoclide/coc.vim', { 'branch': 'release'}
let g:coc_global_extensions = [ 'coc-server' ]

" Terraform
Plug 'hashivim/vim-terraform'
let g:terraform_align=1
autocmd BufRead,BufNewFile *.hcl set filetype=terraform
autocmd BufRead,BufNewFile *.tfvars set filetype=terraform

" Rust
Plug 'rust-lang/rust.vim'
Plug 'timonv/vim-cargo'
Plug 'racer-rust/vim-racer'

Plug 'majutsushi/tagbar'

Plug 'sotte/presenting.vim'


" syntax checker
Plug 'vim-syntastic/syntastic'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

if g:statusline_used == "lightline"
	Plug 'itchyny/lightline.vim'
	" let g:lightline = {
	"       \ 'colorscheme': 'solarized',
	"       \ }
	let g:lightline = {
	      \ 'colorscheme': 'PaperColor',
	      \ 'active': {
	      \   'left': [ [ 'mode', 'paste' ],
	      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
	      \ },
	      \ 'component_function': {
	      \   'gitbranch': 'fugitive#statusline'
	      \ },
	      \ }

elseif g:statusline_used == "airline"
	" statusline
	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'

	let g:airline_theme='solarized'
	let g:airline_solarized_dark_text=1
	" " Enable Powerline fonts for airline
	" let g:airline_powerline_fonts = 0
	" " set encoding=utf-8
	let g:airline#extensions#whitespace#mixed_indent_algo = 1
	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#tabline#fnamemod = ':t'

else
	" flagship
	Plug 'tpope/vim-flagship'
endif

" Initialize plugin system
call plug#end()
" *** vim Plugins }}}


" *** language specific settings {{{
" more stable typescript syntax highlighting, comes with a performance hit!
autocmd BufEnter *.{js,jsx,ts,tsx} :syntax sync fromstart
autocmd BufLeave *.{js,jsx,ts,tsx} :syntax sync clear

" *** language specific settings }}}


" *** color scheme Solarized {{{
colorscheme NeoSolarized
" colorscheme solarized
" let g:solarized_termcolors=256
" let g:solarized_visibility=low
set background=light
if has('termguicolors')
  set termguicolors
endif
" *** }}}

" *** General Settings {{{
syntax enable				" enable syntax
filetype plugin indent on		" Automatically detect file types.

let mapleader = ","
let maplocalleader = "\\"

" map ESC to the homerow to a sequence that effectivelz does noething
" when accidently hit in command mode.
imap jj <Esc>

set laststatus=2			" Always show status line
set noshowmode
set showtabline=1			" show tabs only if there are multiple tabs
set guioptions-=e

set autoindent
set cindent
" set cinoptions=:s,ps,ts,cs
set cinoptions=:0,l1,t0,g0,(0
set cinwords=if,else,while,do,for,switch,case

set autoread
set noautowrite         " don't Automatically save before commands like :next and :make
set hidden              " enable hidden modified buffers
set cmdheight=2
set backspace=indent,eol,start  " more powerful backspacing
"       mit <BS> auch im Normalmodus Zeichen vor Cursor löschen.
" 	(whichwrap+=h,l ist nötig , damit map <BS> 'X' funktioniert auch am Zeilenanfang funktioniert)
set 	whichwrap=b,s,h,l,<,>,[,]
" Backspace-Mappings
map     	<BS>
imap    	<BS>
map 	<BS>    X

" filename patterns to ignore on filename expansion (like CTRLP)
set wildignore+=tags,*~,*.swp,*.o,*.so,*.git,*.hg,*.svn,*.tmp,*.DS_Store,*.ko,*.mod.c,*.class

set hlsearch
set smartcase
set ignorecase

set foldmethod=marker
set foldopen+=jump

set incsearch       " Incremental search
set lazyredraw
set linebreak
set clipboard=unnamed
set pastetoggle=<F2>

set scrolloff=3         " Always keep <x> lines above/below the cursor
set sidescrolloff=5

set showmatch  " Show matching brackets.
set matchtime=5  " Bracket blinking.
set noerrorbells  " No noise.
set vb t_vb= " disable any beeps or flashes on error
set visualbell
set virtualedit=block

set showcmd " Display an incomplete command in the lower right corner of the Vim window

" Bash-style tab completion
set wildmode=longest,list " At command line, complete longest common string, then list alternatives.
set wildmenu

set modeline
set smarttab " Smarter tab levels

set mouse-=a   " Disable mouse
set mousehide  " Hide mouse after chars typed
set splitright
set splitbelow

set timeoutlen=400
set ttimeoutlen=100

set     nowrap          " Zeilen nicht automatisch umbrechen

" backup settings
set     backup
if ( isdirectory( "/var/tmp" ))
  set     backupdir=/var/tmp/vimtmp-$USER
  if ( !isdirectory( &backupdir ))
    silent exe ":!mkdir " . &backupdir . " && chmod 777 ". &backupdir
  endif
endif

" trailing whitespace
" highlight ExtraWhitespace ctermbg=darkmagenta guibg=darkmagenta
" match ExtraWhitespace /\s\+\%#\@<!$/

set list
if (&termencoding ==# 'utf-8' || &encoding ==# 'utf-8') && version >= 700
  set listchars=tab:▸\ ,extends:❯,precedes:❮,trail:.,nbsp:¬
  let &fillchars = "vert:\u2502"
else
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<
endif

" remove trailing whitespace
" nnoremap <C-w> :%s/\s\+$//gec<CR>
" nnoremap <Leader>w :%s/\s\+$//gec<CR>
" Clean trailing whitespace
nnoremap <leader>ww mz:%s/\s\+$//<cr>:let @/=''<cr>`z

" finding files:
" Search down into subfolders
" Provides tab-completion for all file-related tasks, assuming that vim is
" always running in the project base directory.
set path+=**
" Display all matching files when we tab complete
set wildmenu

" poor man's fuzzy search
nnoremap <Leader>p :e **/*
nnoremap <Leader>v :vsplit **/*
nnoremap <Leader>s :split **/*

" jump from ApiClient to api_client.java with 'gf'
set includeexpr=substitute(substitute(substitute(v:fname,'::','/','g'),'$','.rb',''),'\(\<\u\l\+\|\l\+\)\(\u\)','\l\1_\l\2','g')


" NOW WE CAN:
" - Hit tab to :find by partial match
" - Use * to make it fuzzy
" THINGS TO CONSIDER:
" - :b lets you autocomplete any open buffer

" *** General Settings }}}

" *** Security (sudo/pass) {{{

" ***** sudoedit {{{
if !empty($SUDO_USER) && $USER !=# $SUDO_USER
  set viminfo=
  set directory-=~/tmp
  set backupdir-=~/tmp
endif
" ***** sudoedit }}}

" FIXME: disable swapfile, backup, undo and vimonfo for pass.
" Following link might help:
"    https://git.zx2c4.com/password-store/plain/contrib/vim/noplaintext.vim

" *** security }}}



" *** Filetpype Settings {{{
" treat .md as Markdown
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" rust specific settings
let g:rustfmt_autosave = 1
let g:rustfmt_command = 'rustup run stable rustfmt'

let g:racer_cmd = '~/.cargo/bin/racer'
let g:racer_experimental_completer = 1
au FileType rust nmap gd <Plug>(rust-def)
au FileType rust nmap gs <Plug>(rust-def-split)
au FileType rust nmap gx <Plug>(rust-def-vertical)
au FileType rust nmap gr <Plug>(rust-doc)

" tagbar settings for rust
nmap <F8> :TagbarToggle<CR>
let g:tagbar_type_rust = {
    \ 'ctagstype' : 'rust',
    \ 'kinds' : [
        \'T:types,type definitions',
        \'f:functions,function definitions',
        \'g:enum,enumeration names',
        \'s:structure names',
        \'m:modules,module names',
        \'c:consts,static constants',
        \'t:traits',
        \'i:impls,trait implementations',
    \]
    \}

" *** Filetpype Settings }}}

" *** autocmd {{{
au 	BufNewFile,BufRead,StdinReadPost * 	 		if getline(1) =~? "<?php" | set ft=php | endif
au 	BufNewFile,BufRead,StdinReadPost * 	 		if getline(1) =~? "<?python" | set ft=python | endif
au 	FileType c,cpp,lex,yacc					call LoadCscope()
augroup filetypedetect
  " Mail
  autocmd BufRead,BufNewFile *mutt-*              setfiletype mail
augroup END

au BufNewFile,BufRead,BufEnter   *.wiki    setlocal spell    spelllang=de_de textwidth=90
au BufNewFile,BufRead,BufEnter   *.md      setlocal spell    spelllang=de_de textwidth=90
au BufNewFile,BufRead,BufEnter   *.txt     setlocal spell    spelllang=de_de textwidth=90
au BufNewFile,BufRead,BufEnter   README    setlocal spell    spelllang=en_us textwidth=90


""""""" Java
autocmd FileType java setlocal omnifunc=javacomplete#Complete

nmap <F4> <Plug>(JavaComplete-Imports-AddSmart)
imap <F4> <Plug>(JavaComplete-Imports-AddSmart)


" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

" *** autocmd }}}

" *** helper functions {{{
" search parent directories for cscope dbs and add them
function! LoadCscope()
  let db = findfile("cscope.out", ".;")
  if (!empty(db))
    let path = strpart(db, 0, match(db, "/cscope.out$"))
    set nocscopeverbose " suppress 'duplicate connection' error
    exe "cs add " . db . " " . path
    set cscopeverbose
  endif
endfunction
" *** helper functions }}}

" " *** soure local vimrc {{{
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
" " *** soure local vimrc }}}
"
endif " vscode
"
" vim:foldcolumn=2 foldmethod=marker
