" my VIM config

" disable vi compat mode at first
set nocompatible

" *** Vundle Initialization / path configuration {{{
let g:do_vundle_plugin_install = 0
if filereadable( $X_VIM_BASE . "/vimrc" )
  set rtp+=$X_VIM_BASE/bundle/Vundle.vim
  call vundle#rc("$X_VIM_BASE/bundle")
  if !filereadable( $X_VIM_BASE . "/bundle/Vundle.vim/README.md")
    echo "Installing NeoBundle..."
    echo ""
    silent !mkdir -p $X_VIM_BASE
    silent !git clone https://github.com/VundleVim/Vundle.vim.git $X_VIM_BASE/bundle/Vundle.vim
    echo "Installed NeoBundle..."
    let g:do_vundle_plugin_install = 1
  endif
else
  set rtp+=~/.vim/bundle/Vundle.vim
  if !filereadable( $HOME . "/.vim/bundle/Vundle.vim/README.md")
    echo "Installing NeoBundle..."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
    echo "Installed NeoBundle..."
    let g:do_vundle_plugin_install = 1
  endif
endif
" *** Vundle Initialization }}}

" *** Vundle Plugins {{{
call vundle#begin()

  " let Vundle manage Vundle, required
  Plugin 'VundleVim/Vundle.vim'

  " *** Themes
  Plugin 'NLKNguyen/papercolor-theme'

  " *** Other plugins
  " some sane and secure defaults
  Plugin 'tpope/vim-sensible'

  Plugin 'vim-airline/vim-airline'
  Plugin 'vim-airline/vim-airline-themes'

  " GIT
  Plugin 'tpope/vim-fugitive'

  " general purpose vim library - see plugin from http://vim-scripts.org/vim/scripts.html
  Plugin 'L9'

  " automatically add ending objects
  Plugin 'tpope/vim-endwise'

  " commenting (gcc)
  Plugin 'tpope/vim-commentary'

  " quoting made simple
  " --> cs"'
  Plugin 'tpope/vim-surround'

  " Unix helpers:
  " - Remove: Delete a buffer and the file on disk simultaneously.
  " - Unlink: Like :Remove, but keeps the now empty buffer.
  " - Move: Rename a buffer and the file on disk simultaneously.
  " - Rename: Like :Move, but relative to the current file's containing directory.
  " - Chmod: Change the permissions of the current file.
  " - Mkdir: Create a directory, defaulting to the parent of the current file.
  " - Find: Run find and load the results into the quickfix list.
  " - Locate: Run locate and load the results into the quickfix list.
  " - Wall: Write every open window. Handy for kicking off tools like guard.
  " - SudoWrite: Write a privileged file with sudo.
  " - SudoEdit: Edit a privileged file with sudo.
  Plugin 'tpope/vim-eunuch.git'

  " enhanced netrw directory browser - see https://github.com/tpope/vim-vinegar
  Plugin 'tpope/vim-vinegar.git'

  " JSON - see https://github.com/tpope/vim-jdaddy
  " ex. Prettyprint: gqaj
  Plugin 'tpope/vim-jdaddy.git'

  " automatic indentation shift with
  Plugin 'tpope/vim-sleuth'

  " better ga output including unicode codepoint
  Plugin 'tpope/vim-characterize'

  " aligning text - see: http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
  Plugin 'godlygeek/tabular.git'

  " SQL Utilities and dependencies
  Plugin 'vim-scripts/SQLUtilities'
  Plugin 'vim-scripts/Align'

  " Anible-YAML
  " Plugin 'pearofducks/ansible-vim'
  Plugin 'chase/vim-ansible-yaml'
  let g:ansible_options = {'documentation_mapping': '<C-K>'}


" All of your Plugins must be added before the following line
call vundle#end()            " required
" *** Vundle Plugins }}}

" *** Vundle: Initial Plugin Install {{{
if g:do_vundle_plugin_install == 1
  echo "calling PluginInstall"
  PluginInstall
  echo "called  PluginInstall"
endif
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"
"
" *** Vundle: initial plugin install }}}

" *** UI Settings {{{
" load my color scheme
colorscheme PaperColor
" let g:PaperColor_Light_Override = { 'background' : '#abcdef', 'cursorline' : '#dfdfff', 'matchparen' : '#d6d6d6' , 'comment' : '#8e908c' }
let g:PaperColor_Light_Override = { 'background' : '#ffffe6' }

" Enable Powerline fonts for airline
" let g:airline_powerline_fonts = 1
let g:airline_theme='papercolor'
let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline#extensions#tabline#enabled = 1
set timeoutlen=50       " see https://github.com/vim-airline/vim-airline/wiki/FAQ
" *** UI Settings }}}

" *** General Settings {{{
set laststatus=2
set noshowmode
set showtabline=1	" show tabs only if there are multiple tabs
set guioptions-=e

" treat .md as Markdown
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

syntax on                             " enable syntax
filetype plugin indent on             " Automatically detect file types.
set autoindent
set cindent
set cinoptions=:s,ps,ts,cs
set cinwords=if,else,while,do,for,switch,case

set autoread
set autowrite       " Automatically save before commands like :next and :make
set cmdheight=2
set backspace=indent,eol,start  " more powerful backspacing
"       mit <BS> auch im Normalmodus Zeichen vor Cursor löschen.
" 	(whichwrap+=h,l ist nötig , damit map <BS> 'X' funktioniert auch am Zeilenanfang funktioniert)
set 	whichwrap=b,s,h,l,<,>,[,]
" Backspace-Mappings
map     	<BS>
imap    	<BS>
map 	<BS>    X

set hlsearch
set smartcase
set ignorecase

set foldmethod=marker
set foldopen+=jump

set incsearch       " Incremental search
set laststatus=2    " Always show status line
set lazyredraw
set linebreak

set scrolloff=3         " Always keep <x> lines above/below the cursor

set showmatch  " Show matching brackets.
set matchtime=5  " Bracket blinking.
set noerrorbells  " No noise.
set vb t_vb= " disable any beeps or flashes on error
set visualbell
set virtualedit=block

set showcmd " Display an incomplete command in the lower right corner of the Vim window

" Bash-style tab completion
set wildmode=longest,list " At command line, complete longest common string, then list alternatives.
set wildmenu

set modeline
set smarttab " Smarter tab levels

set mouse-=a   " Disable mouse
set mousehide  " Hide mouse after chars typed
set splitright

set     nowrap          		" Zeilen nicht automatisch umbrechen

" backup settings
set     backup
set     backupdir=/var/tmp/vimtmp-$USER
if ( !isdirectory( &backupdir ))
  silent exe ":!mkdir " . &backupdir . " && chmod 777 ". &backupdir
endif


" *** General Settings }}}

" *** Filetype / autocmd {{{
au 	BufNewFile,BufRead,StdinReadPost * 	 		if getline(1) =~? "<?php" | set ft=php | endif
au 	BufNewFile,BufRead,StdinReadPost * 	 		if getline(1) =~? "<?python" | set ft=python | endif
" *** Filetype / autocmd }}}

" *** Sudoedit Security {{{
if !empty($SUDO_USER) && $USER !=# $SUDO_USER
  set viminfo=
  set directory-=~/tmp
  set backupdir-=~/tmp
endif
" *** sudoedit security }}}

" " *** Window resizing {{{
if bufwinnr(1)
  noremap <S-Up> <C-W>+3
  noremap <S-Down> <C-W>-3
  noremap <S-Left> <C-W><3
  noremap <S-Right> <C-W>>3
endif
" " *** Window resizing }}}

" " *** soure local vimrc {{{
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
" " *** soure local vimrc }}}

" vim:foldcolumn=2 foldmethod=marker
